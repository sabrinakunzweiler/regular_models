r"""
Riemann-Roch Lattices
=====================

Let `K` be a field equipped with a discrete valuation `v_K` and let `R` denote
the valuation ring of `v_K`. Let us also fix a field extension `F/K`. Although
this is not necessarily the case, one should think of `F` as the function field
of a smooth projective curve over `K`.

Let `M_K\subset F` be a finitely generated `K`-vector subspace of dimension `n`.
Then for any extension `v` of `v_K` to a discrete valuation on `F`, we obtain an
`R`-submodule of `V`,

.. MATH::

    M_v := \{ f \in M_K \mid v(f) \geq 0 \}.

It is easy to see that `M_v` if a *full lattice*, i.e.\ a free `R`-submodule of
`M_K` of rank `n`. More generally, if `V=\{v_1,\ldots,v_r\}` is a finite set
of valuations as above, then

.. MATH::

  M_V := \bigcap_{v\in V} M_v

is a lattice. We call `M_V` a *Riemann-Roch lattice*.

We define a class ``RRSpace`` whose objects represent a triple `(v_K, F/K, M_K)`
as above. With the available methods it is possible to compute Riemann-Roch
lattices `M_V`.

"""

from sage.all import SageObject


class RRSpace(SageObject):
    r""" Return the Riemann-Roch space defined by the input.

    INPUT:

    - ``v_K`` -- a discrete valuation on a field `K`
    - ``F`` -- a field extension of `K`
    - ``gens`` -- a nonempty list of elements of `F`

    OUTPUT: the object represented by `(v_K, F, M_K)`, where `M_K\subset F`
    is the `K`-subspace generated by ``gens``. Its functionality
    includes:

    - computing the Riemann-Roch lattice `M_V` for a finite set `V` of discrete
      valutions on `F` extending `v_K`
    - for `V_1\subset V_2`, compute the index `(M_{V_1}:M_{V_2})`

    etc.

    """

    def __init__(self, v_K, F, gens):
        self._v_K = v_K
        self._F = F
        self._gens

    def __repr__(self):
        return "the Riemann-Roch space with basis {}".format(self.rational_basis())

    def base_field(self):
        return self._K

    def base_valuation(self):
        return self._v_K

    def function_field(self):
        return self._F

    def rational_basis(self):
        pass

    def add_valuation(self, v):
        r""" Add a valuation to the database, and return the key.

        INPUT:

        - ``v`` -- a discrete valuation on the function field `F`

        OUTPUT: the key for `v` in the database.

        The valuation `v` is added to the database of valuations, and its key is
        returned. It is expected that `v` is an extension of `v_K`, and that it
        has not been added before; but this is not checked.
        """
        pass

    def simple_RR_lattice(self, key):
        pass

    def RR_lattice(self, key_list):
        pass
